- content = @filter.content || {}
- classes = []
- classes << 'visible' if !@filter.errors.empty? || params[:show]

.filter_container.nine.columns.centered#Filter{data: {filter: 'data-filter'}, class: classes}
  = form_for @filter, url: tasks_path, method: :get, remote: true do |f|
    - if @filter.errors.any?
      .row
        .twelve.columns#error_explanation
          %h2= "#{pluralize(@filter.errors.count, "error")} prohibited this filter from being saved:"
          %ul
            - @filter.errors.full_messages.each do |msg|
              %li= msg
    
    .row.section
      = f.hidden_field :id
      = f.hidden_field :area
      .twelve.columns
        = f.label :name
        = f.text_field :name
    
    .row.section
      .four.columns
        = check_box_tag 'filter[content][iteration_mode]', 1, content[:iteration_mode], data: {iteration_mode: true}
        = label_tag 'iteration_mode', 'Group tasks by iteration', class: 'inline_label'
    .row.section.task_iteration_filter{class: content[:iteration_mode] ? 'visible' : nil}
      .three.columns
        = label_tag 'iteration_status', 'Status'
        = select_tag 'filter[content][iteration][status]', options_for_select(Task.all_states, (content[:iteration] || {})[:status])
      .five.columns.end
        = label_tag 'iteration_team', 'Team'
        = select_tag 'filter[content][iteration][team]', options_for_select(Team.iteration_teams, (content[:iteration] || {})[:team] || '')

    .row.section.task_filter{class: content[:iteration_mode] ? 'hidden' : nil}
      .two.columns.multi-select
        = label_tag 'teams', 'Teams'
        = select_tag 'filter[content][teams]', options_for_select(Team.all_teams, content[:teams] || ''), multiple: true
      .two.columns.multi-select
        = label_tag 'projects', 'Projects'
        = select_tag 'filter[content][projects]', options_for_select(Project.all_projects, content[:projects] || ''), multiple: true
      .two.columns.multi-select
        = label_tag 'services', 'Services'
        = select_tag 'filter[content][services]', options_for_select(Service.all_services, content[:services] || ''), multiple: true
      .five.columns.end.multi-select
        = label_tag 'stories', 'Stories'
        = select_tag 'filter[content][stories]', options_for_select(Story.all_stories, content[:stories] || ''), multiple: true
    
    .row.section.task_filter{class: content[:iteration_mode] ? 'hidden' : nil}
      .three.columns
        = label_tag 'status', 'Status'
        = select_tag 'filter[content][status]', options_for_select(Task.all_states, content[:status])
      .three.columns
        = label_tag 'points', 'Minimum Points'
        = select_tag 'filter[content][min_points]', options_for_select(Task.all_points, content[:min_points])
      .three.columns.end
        = label_tag 'points', 'Maximum Points'
        = select_tag 'filter[content][max_points]', options_for_select(Task.all_points, content[:max_points])

    .row
      .four.columns.offset-by-eight.text-right.actions
        = submit_tag 'Apply', name: :apply
        - if @filter.new_record?
          \|
          = submit_tag 'Save', name: :commit_filter
        - else
          \|
          = submit_tag 'Update', name: :commit_filter
          \|
          = link_to 'Delete', tasks_path(destroy: true), method: :delete, data: { confirm: "#{t(:warning_html, scope: :filter)}" }, remote: true
        \|
        = link_to 'Close', '#', data: {filter_close: true}
