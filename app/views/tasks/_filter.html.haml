- content = @filter.content || {}
- classes = []
- classes << 'visible' if !@filter.errors.empty? || params[:show]

#Filter{data: {filter: 1}, class: classes}
  .filter-container
    = form_for @filter, url: tasks_path, method: :get, remote: true do |f|
      = f.hidden_field :id
      = f.hidden_field :area

      - if @filter.errors.any?
        .row-fluid
          .span12
            #error_explanation
              %h2= "#{pluralize(@filter.errors.count, "error")} prohibited this filter from being saved:"
              %ul
                - @filter.errors.full_messages.each do |msg|
                  %li= msg
      
      .row-fluid.section
        .span8
          = f.label :name
          = f.text_field :name, class: 'span12'
        - if current_user.role? :scrum_master
          .span4
            = f.label :user_id
            = flat_select_tag 'filter[user_id]', options_for_select(User.all_users, @filter.user_id)
      
      .row-fluid.section
        .span12
          %label.checkbox{for: 'filter_content_group_by'}
            = check_box_tag 'filter[content][group_by]', 1, content[:group_by] == 'iteration', data: {group_by: :iteration}
            = 'Group tasks by iteration'

      .row-fluid.section
        .controls.controls-row
          .span4
            = label_tag 'filter_content_status', 'Status'
            = flat_select_tag 'filter[content][status]', options_for_select(StatusScopes.all_states, StatusScopes.collapse(content[:status]))
          .span4
            = label_tag 'filter_content_teams', 'Team'
            = flat_select_tag 'filter[content][teams]', options_for_select(Team.all_teams, content[:teams] || '')
          .span4
            = label_tag 'filter_content_projects', 'Projects'
            = flat_select_tag 'filter[content][projects]', options_for_select(Project.all_projects, content[:projects] || '')

      .row-fluid.section.task-filter{class: content[:group_by] ? 'hidden' : nil}
        .controls.controls-row
          .span4.multi-select
            = label_tag 'filter_content_features', 'Features'
            = select_tag 'filter[content][features]', options_for_select(Feature.all_features, content[:features] || ''), multiple: true
          .span4.multi-select
            = label_tag 'filter_content_stories', 'Stories'
            = select_tag 'filter[content][stories]', options_for_select(Story.all_stories, content[:stories] || ''), multiple: true
          .span4
            .row-fluid
              .span8
                = label_tag 'filter_content_min_points', 'Minimum Points'
                = flat_select_tag 'filter[content][min_points]', options_for_select(Task.all_points, content[:min_points])
                = label_tag 'filter_content_max_points', 'Maximum Points'
                = flat_select_tag 'filter[content][max_points]', options_for_select(Task.all_points, content[:max_points])

      .row-fluid
        .span5.offset7.text-right
          = submit_tag 'Apply', name: :apply, class: 'btn btn-small btn-flat btn-primary'
          - if @filter.new_record?
            \|
            = submit_tag 'Save', name: :commit_filter, class: 'btn btn-small btn-flat btn-info'
          - else
            \|
            = submit_tag 'Update', name: :commit_filter, class: 'btn btn-small btn-flat btn-info'
            \|
            = link_to 'Delete', tasks_path(destroy: true), method: :delete, data: { confirm: "#{t(:warning_html, scope: :filter)}" }, remote: true, class: 'btn btn-small btn-flat btn-danger'
          \|
          = link_to 'Close', 'javascript:void();', data: {filter_close: true}, class: 'btn btn-small btn-link'
